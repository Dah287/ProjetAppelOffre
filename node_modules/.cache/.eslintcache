[{"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\index.js":"1","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\App.js":"2","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\HeaderComponent.js":"4","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\FooterComponent.js":"5","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\AddEmployeeComponent.js":"6","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\ListEmployeeComponent.js":"7","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\services\\EmployeeService.js":"8","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\ListAppelOffreComponent.js":"9","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\services\\AppelOffreService.js":"10","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\AddAppelOffreComponent.js":"11","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\DashboardAppelOffreComponent.js":"12","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\LoginComponent.js":"13","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\ListAppelOffreParEntiteComponent.js":"14"},{"size":546,"mtime":1735853235885,"results":"15","hashOfConfig":"16"},{"size":2479,"mtime":1737715079464,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1735853236059,"results":"18","hashOfConfig":"16"},{"size":3076,"mtime":1737447658191,"results":"19","hashOfConfig":"16"},{"size":295,"mtime":1735853236462,"results":"20","hashOfConfig":"16"},{"size":4562,"mtime":1735916124041,"results":"21","hashOfConfig":"16"},{"size":3098,"mtime":1736024844073,"results":"22","hashOfConfig":"16"},{"size":712,"mtime":1736329922230,"results":"23","hashOfConfig":"16"},{"size":9092,"mtime":1737971224005,"results":"24","hashOfConfig":"16"},{"size":1470,"mtime":1737714348292,"results":"25","hashOfConfig":"16"},{"size":16899,"mtime":1737717538629,"results":"26","hashOfConfig":"16"},{"size":4037,"mtime":1737534863304,"results":"27","hashOfConfig":"16"},{"size":2633,"mtime":1736495402697,"results":"28","hashOfConfig":"16"},{"size":7136,"mtime":1737533306962,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"13u8ora",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\index.js",[],["66","67"],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\App.js",["68","69","70","71","72"],"import './App.css';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport FooterComponent from './components/FooterComponent';\nimport HeaderComponent from './components/HeaderComponent';\nimport ListEmployeeComponent from './components/ListEmployeeComponent';\nimport AddEmployeeComponent from './components/AddEmployeeComponent';\nimport ListAppelOffreComponent from './components/ListAppelOffreComponent';\nimport AddAppelOffreComponent from './components/AddAppelOffreComponent';\nimport DashboardAppelOffreComponent from './components/DashboardAppelOffreComponent';\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom';\nimport LoginComponent from './components/LoginComponent';\nimport ListAppelOffreParEntiteComponent from './components/ListAppelOffreParEntiteComponent';\n\nfunction App() {\n\n  const isAuthenticated = !!localStorage.getItem('user'); // Vérifie si l'utilisateur est connecté\n\n  return (\n    <div>\n{/* <Router>\n<HeaderComponent/>\n      <ListAppelOffreComponent/>\n<FooterComponent/>    \n</Router>   */}\n      <Router>\n        <HeaderComponent />\n        <div className= \"container-fluid\">\n          {/* <Switch>\n              <Route exact path = \"/\" component = {ListAppelOffreComponent}></Route>\n              <Route path = \"/appelOffres\" component = {ListAppelOffreComponent}></Route>\n              <Route path = \"/add-appeloffre\" component = {AddAppelOffreComponent} ></Route>\n              <Route path = \"/edit-employee/:id\" component = {AddAppelOffreComponent}></Route>\n              <Route path = \"/dashboard\" component = {DashboardAppelOffreComponent}></Route>\n            </Switch> */}\n              <Switch>\n\n              <Route exact path = \"/\" component = {LoginComponent}></Route>\n              <Route path = \"/appelOffres\" component = {ListAppelOffreComponent}></Route>\n              <Route path = \"/add-appeloffre/:entt\" component = {AddAppelOffreComponent} ></Route>\n              <Route path = \"/edit-employee/:id/:entitee\" component = {AddAppelOffreComponent}></Route>\n              <Route path = \"/dashboard\" component = {DashboardAppelOffreComponent}></Route>\n              <Route path = \"/login\" component = {LoginComponent}></Route>\n              <Route path = \"/ListAppelOffreParEntite/:entitee\" component = {ListAppelOffreParEntiteComponent}></Route>\n\n            </Switch>\n            {/* <FooterComponent /> */}\n        </div>        \n       \n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\HeaderComponent.js",["73"],"import React from 'react'\nimport { Link ,useHistory,useLocation} from 'react-router-dom'\nconst HeaderComponent = () => {\n\n    const user = JSON.parse(localStorage.getItem('user'));\n    const history = useHistory();\n    const location = useLocation(); \n    \n    // Obtenir l'URL actuelle\n    const handleLogout = () => {\n        localStorage.removeItem('user'); // Supprimer l'utilisateur de localStorage\n        history.push('/login'); // Rediriger vers la page de connexion\n    };\n\n    return (\n        <div>\n        <header>\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-primary px-3\">\n                <div className=\"container-fluid d-flex justify-content-between align-items-center\">\n                    {/* Logo ou titre */}\n                    <a href=\"#\" className=\"navbar-brand\">\n                        Appel d'Offre Application\n                    </a>\n\n                    {/* Liens de navigation */}\n                    <div className=\"d-flex align-items-center\">\n                            {/* Afficher les liens si :\n                                1. L'utilisateur est connecté\n                                2. L'URL actuelle n'est pas \"/login\"\n                                3. Le rôle de l'utilisateur est \"admin\"\n                            */}\n                            {user && location.pathname !== '/login' && user.role === 'admin' && (\n                                <>\n                                    <Link className=\"nav-link text-white mx-2\" to=\"/dashboard\"> <strong>RECAP</strong></Link>\n                                    <Link className=\"nav-link text-white mx-2\" to=\"/appelOffres\"><strong>Liste des Appels d'Offres</strong></Link>\n                                </>\n                            )}                 \n                    </div>\n\n                    {/* Bouton de connexion */}\n                    <div>\n                    {user ? (\n                            <div className=\"d-flex align-items-center\">\n                            {/* Logo utilisateur */}\n                            <i className=\"bi bi-person-circle text-white mx-2\" style={{ fontSize: '1.5rem' , marginLeft: '8px'}}></i>\n                            {/* Nom de l'utilisateur */}\n                            <span className=\"text-white mx-2\">{user.role}</span>\n                            {/* Bouton déconnexion */}\n                            <button\n                                className=\"btn btn-outline-light mx-4\"\n                                onClick={handleLogout}\n                            >\n                                Déconnexion\n                            </button>\n                        </div>\n                            ) : (\n                                <a href=\"/login\" className=\"btn btn-outline-light\">\n                                    Connexion\n                                </a>\n                            )}\n                    </div>\n                </div>\n            </nav>\n        </header>\n            <br></br><br></br>\n        </div>\n    )\n}\n\nexport default HeaderComponent\n","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\FooterComponent.js",[],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\AddEmployeeComponent.js",["74"],"import React, {useState, useEffect} from 'react'\nimport {Link, useHistory, useParams } from 'react-router-dom';\nimport EmployeeService from '../services/EmployeeService'\n\nconst AddEmployeeComponent = () => {\n\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [emailId, setEmailId] = useState('')\n    const history = useHistory();\n    const {id} = useParams();\n\n    const saveOrUpdateEmployee = (e) => {\n        e.preventDefault();\n\n        const employee = {firstName, lastName, emailId}\n\n        if(id){\n            EmployeeService.updateEmployee(id, employee).then((response) => {\n                history.push('/employees')\n            }).catch(error => {\n                console.log(error)\n            })\n\n        }else{\n            EmployeeService.createEmployee(employee).then((response) =>{\n\n                console.log(response.data)\n    \n                history.push('/employees');\n    \n            }).catch(error => {\n                console.log(error)\n            })\n        }\n        \n    }\n\n    useEffect(() => {\n\n        EmployeeService.getEmployeeById(id).then((response) =>{\n            setFirstName(response.data.firstName)\n            setLastName(response.data.lastName)\n            setEmailId(response.data.emailId)\n        }).catch(error => {\n            console.log(error)\n        })\n    }, [])\n\n    const title = () => {\n\n        if(id){\n            return <h2 className = \"text-center\">Update Employee</h2>\n        }else{\n            return <h2 className = \"text-center\">Add Employee</h2>\n        }\n    }\n\n    return (\n        <div>\n           <br /><br />\n           <div className = \"container\">\n                <div className = \"row\">\n                    <div className = \"card col-md-6 offset-md-3 offset-md-3\">\n                       {\n                           title()\n                       }\n                        <div className = \"card-body\">\n                            <form>\n                                <div className = \"form-group mb-2\">\n                                    <label className = \"form-label\"> First Name :</label>\n                                    <input\n                                        type = \"text\"\n                                        placeholder = \"Enter first name\"\n                                        name = \"firstName\"\n                                        className = \"form-control\"\n                                        value = {firstName}\n                                        onChange = {(e) => setFirstName(e.target.value)}\n                                    >\n                                    </input>\n                                </div>\n\n                                <div className = \"form-group mb-2\">\n                                    <label className = \"form-label\"> Last Name :</label>\n                                    <input\n                                        type = \"text\"\n                                        placeholder = \"Enter last name\"\n                                        name = \"lastName\"\n                                        className = \"form-control\"\n                                        value = {lastName}\n                                        onChange = {(e) => setLastName(e.target.value)}\n                                    >\n                                    </input>\n                                </div>\n\n                                <div className = \"form-group mb-2\">\n                                    <label className = \"form-label\"> Email Id :</label>\n                                    <input\n                                        type = \"email\"\n                                        placeholder = \"Enter email Id\"\n                                        name = \"emailId\"\n                                        className = \"form-control\"\n                                        value = {emailId}\n                                        onChange = {(e) => setEmailId(e.target.value)}\n                                    >\n                                    </input>\n                                </div>\n\n                                <button className = \"btn btn-success\" onClick = {(e) => saveOrUpdateEmployee(e)} >Submit </button>\n                                <Link to=\"/employees\" className=\"btn btn-danger\"> Cancel </Link>\n                            </form>\n\n                        </div>\n                    </div>\n                </div>\n\n           </div>\n\n        </div>\n    )\n}\n\nexport default AddEmployeeComponent\n","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\ListEmployeeComponent.js",["75"],"import React, {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom/cjs/react-router-dom'\nimport EmployeeService from '../services/EmployeeService'\n\nconst ListEmployeeComponent = () => {\n\n    const [entiteF, setEntiteF] = useState('')\n    const [typeMarcheF, settypeMarcheF] = useState('')\n\n    const [employees, setEmployees] = useState([])\n\n    useEffect(() => {\n\n        getAllEmployees(entiteF,typeMarcheF);\n        setEntiteF(entiteF)\n        settypeMarcheF(typeMarcheF)\n\n    }, [])\n\n    const getAllEmployees = (entiteF,typeMarcheF) => {\n        EmployeeService.getAllEmployees(entiteF,typeMarcheF).then((response) => {\n            setEmployees(response.data)\n            console.log(response.data);\n        }).catch(error =>{\n            console.log(error);\n        })\n    }\n\n    \n\n    const deleteEmployee = (employeeId) => {\n       EmployeeService.deleteEmployee(employeeId).then((response) =>{\n        getAllEmployees();\n\n       }).catch(error =>{\n           console.log(error);\n       })\n        \n    }\n\n    return (\n        <div className = \"container\">\n            <h2 className = \"text-center\"> List Employees </h2>\n            <Link to = \"/add-appelOffre\" className = \"btn btn-primary mb-2\" > Add Employee </Link>\n            {/*  */}\n            <div>\n        <input\n          type=\"text\"\n          name=\"entite\"\n          placeholder=\"Filtrer par Entité\"\n          value = {entiteF}\n          onChange = {(e) => setEntiteF(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          name=\"typeMarche\"\n          placeholder=\"Filtrer par Type de Marché\"\n          value = {typeMarcheF}\n          onChange = {(e) => settypeMarcheF(e.target.value)}\n        />\n      </div>\n            {/*  */}\n            <table className=\"table table-bordered table-striped\">\n                <thead>\n                    <th> Employee Id </th>\n                    <th> Employee First Name </th>\n                    <th> Employee Last Name </th>\n                    <th> Employee Email Id </th>\n                    <th> Actions </th>\n                </thead>\n                <tbody>\n                    {\n                        employees.map(\n                            employee =>\n                            <tr key = {employee.id}> \n                                <td> {employee.id} </td>\n                                <td> {employee.firstName} </td>\n                                <td>{employee.lastName}</td>\n                                <td>{employee.emailId}</td>\n                                <td>\n                                    <Link className=\"btn btn-info\" to={`/edit-employee/${employee.id}`} >Update</Link>\n                                    <button className = \"btn btn-danger\" onClick = {() => deleteEmployee(employee.id)}\n                                    style = {{marginLeft:\"10px\"}}> Delete</button>\n                                </td>\n                            </tr>\n                        )\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default ListEmployeeComponent\n","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\services\\EmployeeService.js",[],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\ListAppelOffreComponent.js",["76","77","78"],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\services\\AppelOffreService.js",[],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\AddAppelOffreComponent.js",["79","80","81"],"import React, {useState, useEffect} from 'react'\r\nimport {Link, useHistory, useParams } from 'react-router-dom';\r\nimport EmployeeService from '../services/EmployeeService'\r\nimport AppelOffreService from '../services/AppelOffreService';\r\nimport './AddAppelOffreComponent.css'; // Chemin vers votre fichier CSS\r\nconst AddAppelOffreComponent = () => {\r\n\r\n    const [numero, setNumero] = useState('')\r\n    const [entite, setEntite] = useState('')\r\n    const [objet, setObjet] = useState('')\r\n    const [typeMarche, settypeMarche] = useState('')\r\n    const [estimation, setEstimation] = useState('')\r\n    const [pme, setPme] = useState('')\r\n    // \r\n    const [moisPublicationPrevisionnelle\t, setMoisPublicationPrevisionnelle] = useState('')\r\n    const [dateOuverturePrevisionnelle\t, setDateOuverturePrevisionnelle] = useState('')\r\n    //   \r\n    const [datetransmisCe, setDatetransmisCe] = useState('')\r\n    const [dateobservationMc\t, setDateobservationMc] = useState('')\r\n    const [dateOuvertureReelle\t, setDateOuvertureReelle] = useState('')\r\n    const [observations\t, set0bservations] = useState('')\r\n    const [dateJugement\t, setDateJugement] = useState('')\r\n\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n    let {entitee} = useParams();\r\n    \r\n    \r\n    if (entitee === undefined) {\r\n        entitee = null;\r\n    }\r\n\r\n    const {entt} = useParams();\r\n    const handleCancel = () => {\r\n        if(id){\r\n     \r\n             \r\n                console.log(entitee)\r\n                if(entitee === \"no\")\r\n                {\r\n                    history.push('/appelOffres')\r\n                    \r\n                }else{\r\n                    console.log(entitee)\r\n                    history.push(`/ListAppelOffreParEntite/${entitee}`);\r\n                    \r\n                }\r\n              \r\n            \r\n\r\n        }else{\r\n            \r\n\r\n                console.log(\"entt ici \"+entt)\r\n                if(entt === \"noentite\")\r\n                    {\r\n                        console.log(\"ici no \"+entt)\r\n                        history.push('/appelOffres')\r\n                    }else{                       \r\n                        console.log(\"ici \"+entt)\r\n                        history.push(`/ListAppelOffreParEntite/${entt}`);\r\n                        \r\n                    }\r\n    \r\n        }\r\n      };\r\n    const saveOrUpdatedAppelOffre = (e) => {\r\n        e.preventDefault();\r\n        if (!objet || !entite) {\r\n            alert(\"Veuillez remplir  les champs  !\");\r\n            return;\r\n        }\r\n        const appelOffre = {numero, entite, objet,typeMarche,estimation,pme,moisPublicationPrevisionnelle,dateOuverturePrevisionnelle,datetransmisCe,dateobservationMc,dateOuvertureReelle,dateJugement,observations}\r\n\r\n        if(id){\r\n            AppelOffreService.updateappelOffre(id, appelOffre).then((response) => {\r\n                console.log(response.data.numero)\r\n                console.log(entitee)\r\n                if(entitee === \"no\")\r\n                {\r\n                    history.push('/appelOffres')\r\n                    \r\n                }else{\r\n                    console.log(entitee)\r\n                    history.push(`/ListAppelOffreParEntite/${entitee}`);\r\n                    \r\n                }\r\n              \r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        }else{\r\n            AppelOffreService.createAppelOffre(appelOffre).then((response) =>{\r\n\r\n                console.log(\"entt ici \"+entt)\r\n                if(entt === \"noentite\")\r\n                    {\r\n                        console.log(\"ici no \"+entt)\r\n                        history.push('/appelOffres')\r\n                    }else{                       \r\n                        console.log(\"ici \"+entt)\r\n                        history.push(`/ListAppelOffreParEntite/${entt}`);\r\n                        \r\n                    }\r\n    \r\n          \r\n    \r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        AppelOffreService.getappelOffreById(id).then((response) =>{\r\n            setNumero(response.data.numero)\r\n            setEntite(response.data.entite)\r\n            setObjet(response.data.objet)\r\n            settypeMarche(response.data.typeMarche)\r\n            setEstimation(response.data.estimation)\r\n            setPme(response.data.pme)\r\n            //\r\n            setMoisPublicationPrevisionnelle(response.data.moisPublicationPrevisionnelle)\r\n            setDateOuverturePrevisionnelle(response.data.dateOuverturePrevisionnelle)\r\n            // \r\n            setDatetransmisCe(response.data.datetransmisCe)\r\n            setDateobservationMc(response.data.dateobservationMc)\r\n            setDateOuvertureReelle(response.data.dateOuvertureReelle)\r\n            setDateJugement(response.data.dateJugement)\r\n            set0bservations(response.data.observations)\r\n\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }, [])\r\n\r\n    const title = () => {\r\n\r\n        if(id){\r\n            return <h2 className = \"text-center\">Modifier Appel Offre</h2>\r\n        }else{\r\n            return <h2 className = \"text-center\">Ajouter Appel Offre</h2>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           <br /><br />\r\n           <div className = \"container\">\r\n                <div className = \"row\">\r\n                    <div className = \"card col-md-6 offset-md-3 offset-md-3\">\r\n                       {\r\n                           title()\r\n                       }\r\n                        <div className = \"card-body\">\r\n                            <form>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Numero d'appel d'offre :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Numero d'appel d'offre\"\r\n                                        name = \"numero\"\r\n                                        className = \"form-control\"\r\n                                        value = {numero}\r\n                                        onChange = {(e) => setNumero(e.target.value)}\r\n                                        />\r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Entité :</label>\r\n                                        <select\r\n                                        className=\"form-select\"\r\n                                        value = {entite}\r\n                                        required\r\n                                        onChange = {(e) => setEntite(e.target.value)}                                    >\r\n                                        <option selected>ENTITE</option>\r\n                                        <option value=\"DPF\">DPF</option>\r\n                                        <option value=\"DGR\">DGR</option>\r\n                                        <option value=\"DA\">DA</option>\r\n                                        <option value=\"DDA\">DDA</option>\r\n                                        <option value=\"DDDA\">DDDA</option>\r\n                                        <option value=\"DRH\">DRH</option>\r\n                                        <option value=\"SAICG\">SAICG</option>\r\n                                        <option value=\"SAICG\">SMG</option>\r\n                                    </select>                                   \r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Objet :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter Objet\"\r\n                                        name = \"Objet\"\r\n                                        className = \"form-control\"\r\n                                        value = {objet}\r\n                                        onChange = {(e) => setObjet(e.target.value)}\r\n                                        required\r\n                                        />\r\n                                  \r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Type Marché :</label>                                  \r\n\r\n                                        <select\r\n                                        className=\"form-select\"\r\n                                        value = {typeMarche}\r\n                                        onChange = {(e) => settypeMarche(e.target.value)}\r\n                                    >\r\n                                        <option selected>TYPE MARCHE</option>\r\n                                        <option value=\"F\">F</option>\r\n                                        <option value=\"S\">S</option>\r\n                                        <option value=\"T\">T</option>\r\n                                    </select>\r\n                                  \r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> Estimation :</label>\r\n                                    <input\r\n                                        type = \"number\"\r\n                                        placeholder = \"Enter Estimation\"\r\n                                        name = \"Estimation\"\r\n                                        className = \"form-control\"\r\n                                        value = {estimation}\r\n                                        onChange = {(e) => setEstimation(e.target.value)}\r\n                                        />\r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> PME :</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter PME\"\r\n                                        name = \"PME\"\r\n                                        className = \"form-control\"\r\n                                        value = {pme}\r\n                                        onChange = {(e) => setPme(e.target.value)}\r\n                                        />\r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\"style={{ backgroundColor: \"#D8BFD8\"}}>\r\n                                    <label className = \"form-label\"> Date de publication Prévisionnelle\t :</label>\r\n                                    <input\r\n                                        type = \"date\"\r\n                                        placeholder = \"Date de publication Prévisionnelle\"\r\n                                        name = \"moisPublicationPrevisionnelle\"\r\n                                        className = \"form-control\"\r\n                                        value = {moisPublicationPrevisionnelle}\r\n                                        onChange = {(e) => setMoisPublicationPrevisionnelle(e.target.value)}\r\n                                    >\r\n                                    </input><br></br>\r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\"style={{ backgroundColor: \"#87CEEB\"}}>\r\n                                    <label className = \"form-label\"> DATE Transmis BAM :</label>\r\n                                    <input\r\n                                        type = \"date\"\r\n                                        placeholder = \"DATE D’OUVERTURE Prévisionnelle\"\r\n                                        name = \"DateJugement\"\r\n                                        className = \"form-control\"\r\n                                        value = {dateOuverturePrevisionnelle}\r\n                                        onChange = {(e) => setDateOuverturePrevisionnelle(e.target.value)}\r\n                                        /><br></br>\r\n                                </div>\r\n\r\n                                <div className = \"form-group mb-2\" style={{ backgroundColor: \"#FFFF00\"}}>\r\n                                    <label className = \"form-label\">Transmis commission :</label>\r\n                                    <input\r\n                                        type = \"date\"\r\n                                        placeholder = \"Date Transmis CE\"\r\n                                        name = \"Observations\"\r\n                                        className = \"form-control\"\r\n                                        value = {datetransmisCe}\r\n                                        onChange = {(e) => setDatetransmisCe(e.target.value)}\r\n                                        />\r\n                                        <br></br>\r\n                                </div>\r\n                                <div className = \"form-group mb-2\" style={{ backgroundColor: \"#F4A460\"}}>\r\n                                    <label className = \"form-label\" > Observation MC :</label>\r\n                                    <input\r\n                                        type = \"date\"\r\n                                        placeholder = \"Date Observation MC\"\r\n                                        name = \"dateobservationMc\"\r\n                                        className = \"form-control\"\r\n                                        value = {dateobservationMc}\r\n                                        onChange = {(e) => setDateobservationMc(e.target.value)}\r\n                                        /><br></br>\r\n                                </div>\r\n                                <div className = \"form-group mb-2\" style={{ backgroundColor: \"#7CFC00\"}}>\r\n                                    <label className = \"form-label\" > Date ouverture Reelle:</label>\r\n                                    <input\r\n                                    \r\n                                        type = \"date\"\r\n                                        placeholder = \"Date ouverture Reelle\"\r\n                                        name = \"dateOuvertureReelle\"\r\n                                        className = \"form-control\"\r\n                                        value = {dateOuvertureReelle}\r\n                                        onChange = {(e) => setDateOuvertureReelle(e.target.value)}\r\n                                        /><br></br>\r\n                                </div>\r\n                                <div className = \"form-group mb-2\" style={{ backgroundColor: \"#FA8072\"}}>\r\n                                    <label className = \"form-label\"> Date jugement\t:</label>\r\n                                    <input\r\n                                        type = \"date\"\r\n                                        placeholder = \"Date jugement\"\r\n                                        name = \"dateJugement\"\r\n                                        className = \"form-control\"\r\n                                        value = {dateJugement}\r\n                                        onChange = {(e) => setDateJugement(e.target.value)}\r\n                                        /><br></br>\r\n                                </div>\r\n                                <div className = \"form-group mb-2\">\r\n                                    <label className = \"form-label\"> OSERVATIONS:</label>\r\n                                    <input\r\n                                        type = \"text\"\r\n                                        placeholder = \"Enter OSERVATIONS\"\r\n                                        name = \"observations\"\r\n                                        className = \"form-control\"\r\n                                        value = {observations}\r\n                                        onChange = {(e) => set0bservations(e.target.value)}\r\n                                        />\r\n                                </div>\r\n                                        <div>\r\n                                \r\n                                        <button className=\"btn btn-danger\"  onClick={handleCancel}   >      Cancel    </button>                                <button className = \"btn btn-success\" style={{ marginLeft: \"30px\" }} onClick = {(e) => saveOrUpdatedAppelOffre(e)} >Submit </button>\r\n                                       </div>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddAppelOffreComponent\r\n","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\DashboardAppelOffreComponent.js",[],"C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\LoginComponent.js",["82","83"],"import axios from 'axios';\r\nimport React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport AppelOffreService from '../services/AppelOffreService';\r\n\r\nconst LoginComponent = () => {\r\n\r\n\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const history = useHistory(); // Hook pour naviguer\r\n\r\n    const user = {username, password}; \r\n\r\n\r\n    const loginf = (e) => {\r\n        e.preventDefault();\r\n\r\n        const utilisateuropt = {username, password}\r\n\r\n    \r\n            AppelOffreService.login(utilisateuropt).then((response) => {\r\n                console.log(response.data)\r\n                if(response.data=== \"admin\"){\r\n                  localStorage.setItem('user', JSON.stringify({ username, role: 'admin' }));\r\n                    history.push('/appelOffres')\r\n                }\r\n                else if(response.data=== \"no\"){\r\n                  setMessage(\"mot de pass ou username incorct\")\r\n                }else{\r\n                  let entitee = response.data;\r\n                  setMessage(\"vert \" +entitee)\r\n                  localStorage.setItem('user', JSON.stringify({ username, role: 'user', entitee }));\r\n                  history.push(`/ListAppelOffreParEntite/${entitee}`);\r\n                  \r\n             //     <Link className=\"btn btn-info\" to={`/edit-employee/${employee.id}`} >Update</Link>\r\n                }\r\n               \r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n        \r\n        \r\n    }\r\n\r\n  return (\r\n\r\n    \r\n    <div className=\"login-container\">\r\n        <br></br>\r\n        \r\n      <h2>Connexion</h2>\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label>Nom d'utilisateur</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Mot de passe</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"btn btn-success\"\r\n          onClick={(e) => loginf(e)}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <br></br>\r\n      {message && <p style={{ color: \"red\" }}>{message}</p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginComponent\r\n","C:\\Users\\user\\Downloads\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App-main\\react-hooks-frontend\\src\\components\\ListAppelOffreParEntiteComponent.js",["84"],"\r\nimport React, {useState, useEffect} from 'react'\r\nimport AppelOffreService from '../services/AppelOffreService'\r\nimport { Link ,useHistory,useParams} from 'react-router-dom'\r\nconst ListAppelOffreParEntiteComponent = () => {\r\n\r\n\r\n\r\nconst [typeMarcheF, settypeMarcheF] = useState('')\r\n\r\nconst [appelOffre, setAppelOffre] = useState([])\r\n\r\nconst {entitee} = useParams();\r\n\r\n  useEffect(() => {\r\n    \r\n        getAllAppelOffre(entitee,typeMarcheF);\r\n        \r\n    }, [entitee,typeMarcheF])\r\n\r\n    const getAllAppelOffre = (entiteF,typeMarcheF) => {\r\n        AppelOffreService.getAllAppelOffre(entiteF,typeMarcheF).then((response) => {\r\n            setAppelOffre(response.data)\r\n            console.log(entiteF);\r\n            console.log(typeMarcheF);\r\n        }).catch(error =>{\r\n            console.log(error);\r\n        })\r\n    } \r\n\r\n    const deleteappelOffre = (appelOffreId) => {\r\n        // Afficher une boîte de dialogue de confirmation\r\n        const confirmation = window.confirm(\"Êtes-vous sûr de vouloir supprimer cet appel d'offre ?\");\r\n    \r\n        // Si l'utilisateur confirme la suppression\r\n        if (confirmation) {\r\n            AppelOffreService.deleteappelOffre(appelOffreId)\r\n                .then((response) => {\r\n                    // Recharger la liste des appels d'offre après la suppression\r\n                    getAllAppelOffre(entitee, typeMarcheF);\r\n    \r\n                    // Rediriger vers la liste des appels d'offre\r\n                    history.push(`/ListAppelOffreParEntite/${entitee}`);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        } else {\r\n            // Si l'utilisateur annule, ne rien faire\r\n            console.log(\"Suppression annulée.\");\r\n        }\r\n    };\r\n    const isValidDate = (date) => {\r\n        // Vérifie si la date est valide\r\n        if(date!=null){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n      };\r\n\r\n      const history = useHistory();\r\n\r\n\r\n  return (\r\n    \r\n    <div className=\"container-fluid\">\r\n    <h2 className=\"text-center\">List Appel Offre : {entitee}</h2>\r\n\r\n    {/* Filtres */}\r\n    <div className=\"row my-3\">\r\n\r\n        <div className=\"col-5\">\r\n            <select\r\n                className=\"form-select\"\r\n                value={typeMarcheF}\r\n                onChange={(e) => settypeMarcheF(e.target.value)}\r\n            >\r\n                <option selected>TYPE MARCHE</option>\r\n                <option value=\"F\">Fourniture</option>\r\n                <option value=\"S\">Service</option>\r\n                <option value=\"T\">Travaux</option>\r\n            </select>\r\n        </div>\r\n        <div className=\"col-4\">\r\n        <div className=\"col text-end\">\r\n        <p>\r\n                <strong>\r\n                    Total des appels d'offre : <span style={{ color: 'red' }}>{appelOffre.length}</span>\r\n                </strong>\r\n                </p>\r\n                </div>\r\n        </div>\r\n        <div className=\"col text-end\">\r\n            <Link  to={`/add-appeloffre/${entitee}`} className=\"btn btn-primary\">\r\n            Ajouter AO\r\n            </Link>\r\n        </div>\r\n    </div>\r\n\r\n    {/* Table */}\r\n    <div className=\"table-responsive\">\r\n    <table className=\"table table-bordered table-striped\" style={{ tableLayout: \"fixed\" }}>\r\n  <thead>\r\n    <tr>\r\n      <th style={{ textAlign: \"center\" }}>Entité</th>\r\n      <th style={{ textAlign: \"center\", width: \"550px\", whiteSpace: \"nowrap\", overflow: \"hidden\", textOverflow: \"ellipsis\" }}>Objet</th>\r\n      <th style={{ textAlign: \"center\",width: \"80px\" }}>Type Marché</th>\r\n      <th style={{ textAlign: \"center\" }}>Estimation</th>\r\n      <th style={{ textAlign: \"center\",width: \"80px\" }}>PME</th>\r\n      <th style={{ textAlign: \"center\" }}>Publication PREV</th>\r\n      <th style={{ textAlign: \"center\" }}>Transmis BAM</th>\r\n      <th style={{ textAlign: \"center\" }}>Transmis CE</th>\r\n      <th style={{ textAlign: \"center\" }}>Observation MC</th>\r\n      <th style={{ textAlign: \"center\" ,width: \"60px\"}}>N° AO</th>\r\n      <th style={{ textAlign: \"center\" }}>Ouverture Reelle</th>\r\n      <th style={{ textAlign: \"center\" }}>Jugement</th>\r\n      <th style={{ textAlign: \"center\" }}>Observations</th>\r\n      <th style={{ textAlign: \"center\" ,width: \"140px\"}}>Actions</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {appelOffre\r\n      .sort((a, b) => {\r\n        const dateA = a.dateOuvertureReelle ? new Date(a.dateOuvertureReelle) : null;\r\n        const dateB = b.dateOuvertureReelle ? new Date(b.dateOuvertureReelle) : null;\r\n        const dateTransA = a.datetransmisCe ? new Date(a.datetransmisCe) : null;\r\n        const dateTransB = b.datetransmisCe ? new Date(b.datetransmisCe) : null;\r\n\r\n        if (dateA && !dateB) return -1;\r\n        if (!dateA && dateB) return 1;\r\n        if (dateA && dateB) return dateA - dateB;\r\n\r\n        if (dateTransA && !dateTransB) return -1;\r\n        if (!dateTransA && dateTransB) return 1;\r\n        if (dateTransA && dateTransB) return dateTransA - dateTransB;\r\n\r\n        return 0;\r\n      })\r\n      .map((appel) => (\r\n        <tr\r\n          key={appel.id}\r\n          style={{\r\n            backgroundColor: appel.dateOuvertureReelle\r\n              ? \"#50C878\"\r\n              : appel.datetransmisCe\r\n              ? \"#FFFF00\"\r\n              : \"white\",\r\n          }}\r\n        >\r\n          <td>{appel.entite}</td>\r\n          <td style={{ width: \"550px\", whiteSpace: \"nowrap\", overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n            {appel.objet}\r\n          </td>\r\n          <td>{appel.typeMarche}</td>\r\n          <td>{appel.estimation?.toLocaleString('fr-MA')}</td>\r\n          <td>{appel.pme}</td>\r\n          <td>{appel.moisPublicationPrevisionnelle}</td>\r\n          <td>{appel.dateOuverturePrevisionnelle}</td>\r\n          <td>{appel.datetransmisCe}</td>\r\n          <td>{appel.dateobservationMc}</td>\r\n          <td style={{ textAlign: \"center\" ,width: \"60px\"}}>{appel.numero}</td>\r\n          <td>{appel.dateOuvertureReelle}</td>\r\n          <td>{appel.dateJugement}</td>\r\n          <td>{appel.observations}</td>\r\n          <td style={{  alignItems: \"center\" ,width: \"160px\"}}>\r\n            <Link\r\n              className=\"btn btn-info\"\r\n              style={{\r\n                \r\n                fontSize: \"12px\",\r\n                width: \"50px\",\r\n                paddingLeft : \"1px\",\r\n                paddingRight:\"1px\"\r\n              \r\n              }}\r\n              to={`/edit-employee/${appel.id}/${entitee}`}\r\n            >\r\n              Modifier\r\n            </Link>\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => deleteappelOffre(appel.id)}\r\n              style={{\r\n                \r\n                fontSize: \"12px\",\r\n                width: \"60px\",\r\n                paddingLeft : \"1px\",\r\n                paddingRight:\"1px\",\r\n                marginLeft: \"10px\"\r\n             \r\n              }}\r\n            >\r\n              Supprimer\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n  </tbody>\r\n</table>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default ListAppelOffreParEntiteComponent",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":23},{"ruleId":"89","severity":1,"message":"93","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":29},{"ruleId":"89","severity":1,"message":"94","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":28},{"ruleId":"89","severity":1,"message":"95","line":10,"column":10,"nodeType":"91","messageId":"92","endLine":10,"endColumn":18},{"ruleId":"89","severity":1,"message":"96","line":16,"column":9,"nodeType":"91","messageId":"92","endLine":16,"endColumn":24},{"ruleId":"97","severity":1,"message":"98","line":21,"column":21,"nodeType":"99","endLine":21,"endColumn":58},{"ruleId":"100","severity":1,"message":"101","line":48,"column":8,"nodeType":"102","endLine":48,"endColumn":10,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":18,"column":8,"nodeType":"102","endLine":18,"endColumn":10,"suggestions":"105"},{"ruleId":"89","severity":1,"message":"106","line":11,"column":8,"nodeType":"91","messageId":"92","endLine":11,"endColumn":13},{"ruleId":"89","severity":1,"message":"107","line":50,"column":11,"nodeType":"91","messageId":"92","endLine":50,"endColumn":22},{"ruleId":"89","severity":1,"message":"108","line":59,"column":13,"nodeType":"91","messageId":"92","endLine":59,"endColumn":20},{"ruleId":"89","severity":1,"message":"109","line":2,"column":9,"nodeType":"91","messageId":"92","endLine":2,"endColumn":13},{"ruleId":"89","severity":1,"message":"110","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":138,"column":8,"nodeType":"102","endLine":138,"endColumn":10,"suggestions":"111"},{"ruleId":"89","severity":1,"message":"112","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":13},{"ruleId":"89","severity":1,"message":"113","line":15,"column":11,"nodeType":"91","messageId":"92","endLine":15,"endColumn":15},{"ruleId":"89","severity":1,"message":"107","line":53,"column":11,"nodeType":"91","messageId":"92","endLine":53,"endColumn":22},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'FooterComponent' is defined but never used.","Identifier","unusedVar","'ListEmployeeComponent' is defined but never used.","'AddEmployeeComponent' is defined but never used.","'Redirect' is defined but never used.","'isAuthenticated' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["116"],"React Hook useEffect has missing dependencies: 'entiteF' and 'typeMarcheF'. Either include them or remove the dependency array. You can also do a functional update 'setEntiteF(e => ...)' if you only need 'entiteF' in the 'setEntiteF' call.",["117"],"'enttt' is assigned a value but never used.","'isValidDate' is assigned a value but never used.","'history' is assigned a value but never used.","'Link' is defined but never used.","'EmployeeService' is defined but never used.",["118"],"'axios' is defined but never used.","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"119","fix":"123"},"Update the dependencies array to be: [id]",{"range":"124","text":"125"},"Update the dependencies array to be: [entiteF, typeMarcheF]",{"range":"126","text":"127"},{"range":"128","text":"125"},[1371,1373],"[id]",[504,506],"[entiteF, typeMarcheF]",[5005,5007]]